Python codebase:

There should be a script test.py with:
At least 3 unit tests that test important functionalities of your project.
These tests should have somewhat descriptive names that hint at what they’re testing, i.e. please don’t call them test1, test_two.
A if __name__ == "__main__": code block in the bottom of the script that calls all the test cases in succession.
If I run this file and your code fails any of the tests, there will be a penalty.
There should be at least 1 custom class defined in a .py file (that is not test.py).
This class should have at least 3 methods besides __init__ that are used somewhere in the project.
It may be inherited from an existing class from an existing Python package. If so, there must be at least 2 methods besides __init__ that are different from the base class and are used somewhere in the project.
It cannot be a subclass of Exception.
The custom class should be imported and used in a separate .py or .ipynb file.
Example: class Puppycat is defined in Puppycat.py, and it is imported and used in the script watch_me_meow.py.
test.py doesn’t count. The demo file does count.
There should be at least 1 function defined outside of the custom class.
This function should be used somewhere that’s not test.py.
There should be at least 2 examples of exception handling.
There should be at least 1 end-to-end demo file. This can be in either .py or .ipynb.
Every function and class should have an appropriate docstring.
Everything should be sufficiently and accurately commented.
Everything should be safe from bugs (to the best of your knowledge). If I run the demo code and encounter a bug that should have been easily fixed based on your knowledge from PIC 16A, there will be points deducted. But I will never purposefully try to break your code, e.g. give the wrong input or test tricky edge cases. 
 

Git repo:

The repo should have a requirements.txt with the list of packages used to develop your project. This is good practice for reproducible and responsible programming!
If I install those packages and run your demo code according to your instructions, I should get exactly what you said without any errors. 
Be careful about package versions.
You can run conda list --explicit > requirements.txt to automatically generate this list.
Every member of your team should be added as a collaborator, and should have made at least one git commit.
Your README.md file should include:
Project name.
Names of group members (if you don’t want to for privacy, add usernames).
Short description of the project.
Instructions on how to install the package requirements. If you used the conda line above, your instruction should have the line conda create --name NEWENV --file requirements.txt.
Detailed description of the demo file. This includes detailed instructions on how to run it, what output one should expect to see, and any explanations or interpretations of the result. There should be at least 2 figures embedded in this section. It can be screenshots of your game, or plots generated by your data visualization code. Make sure these figures have appropriate titles and captions, and are sufficiently explained in your text.
Scope and limitations, including ethical implications, accessibility concerns, and ideas for potential extensions.
License and terms of use (probably MIT license).
References and acknowledgement.
(If appropriate) background and source of the dataset.
(If appropriate) links to any tutorials you used, and at least 3 specific things you implemented that differentiates your project from what’s already in the tutorial.
Your demo has to be completely reproducible by people outside of your team. If I follow your code and instructions but can’t reproduce your results, there will be a big penalty.
 

Teamwork:

Everyone should contribute to brainstorming, programming, debugging, and presenting in this project. Your team will get a 0 if one person wrote all the code.
Every member of the team should be able to explain to me what every line of their code does. This includes code that someone else from the team wrote, or code copied from Stack Overflow/online tutorials.